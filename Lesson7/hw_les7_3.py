# Реализовать программу работы с органическими клетками,
# состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и
# выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения
# до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек
# общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять
# только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей
# клетки определяется как произведение количества ячеек этих
# двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей
# клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.
# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество
# ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество
# ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

class Cell:
    def __init__(self, cell_count):
        self.cell_count = cell_count

    property
    def cell_count(self):
        return self.cell_count()

    def __add__(self, other):
        return Cell(self.cell_count + other.cell_count)
    # сложение (__add__())

    def __sub__(self, other):
         if (self.cell_count - other.cell_count) > 0:
              return Cell(self.cell_count - other.cell_count)
         else: print('Отрицательно!')
    #вычитание(__sub__())

    def __mul__(self, other):
        return Cell(int(self.cell_count * other.cell_count))
    # умножение (__mul__())

    def __truediv__(self, other):
        return Cell(round(self.cell_count / other.cell_count))
    #деление(__truediv__())

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.cell_count/cells_in_row)):
            row += f'{"*" * cells_in_row} \\n'
        row += f'{"*" * (self.cell_count % cells_in_row)}'
        return row



a = Cell(20)
print(a.make_order(4))

